{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","state/reducer.ts","PatientInfo/Page.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","apiBaseUrl","initialState","patients","patient","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","type","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","data","payload","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","Cell","to","id","Page","useParams","useEffect","get","fetchPatient","fetchDiagnoses","log","pa","Icon","entries","ent","date","description","diagnosisCodes","code","App","patientListFromApi","fetchPatientList","Link","primary","Divider","hidden","exact","path","ReactDOM","render","action","reduce","memo","diagnose","document","getElementById"],"mappings":"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","file":"static/js/main.0a5e33d1.chunk.js","sourcesContent":["export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\nexport interface BaseEntry {\r\n  id: string;\r\n  description: string;\r\n  date: string;\r\n  specialist: string;\r\n  diagnosisCodes?: Array<Diagnosis['code']>;\r\n}\r\n\r\nexport type SickLeave = {\r\n  startDate: string,\r\n  endDate: string,\r\n};\r\n\r\nexport interface OccupationalHealthcareEntry extends BaseEntry {\r\n  type: 'OccupationalHealthcare',\r\n  employerName: string,\r\n  sickLeave?: SickLeave\r\n}\r\n\r\nexport enum HealthCheckRating {\r\n  \"Healthy\" = 0,\r\n  \"LowRisk\" = 1,\r\n  \"HighRisk\" = 2,\r\n  \"CriticalRisk\" = 3\r\n}\r\n\r\ninterface HealthCheckEntry extends BaseEntry {\r\n  type: \"HealthCheck\";\r\n  healthCheckRating: HealthCheckRating;\r\n}\r\n\r\nexport type Discharge = {\r\n  date: string,\r\n  criteria: string,\r\n};\r\n\r\nexport interface HospitalEntry extends BaseEntry {\r\n  type: 'Hospital',\r\n  discharge: Discharge\r\n}\r\n\r\nexport type Entry =\r\n    | HospitalEntry\r\n    | OccupationalHealthcareEntry\r\n    | HealthCheckEntry;\r\n\r\nexport interface Patient {\r\n  id: string;\r\n  name: string;\r\n  occupation: string;\r\n  gender: Gender;\r\n  ssn?: string;\r\n  dateOfBirth?: string;\r\n  entries: Entry[]\r\n}\r\n","export const apiBaseUrl = 'http://localhost:3000/api';\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Diagnosis, Patient } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n  patients: { [id: string]: Patient };\r\n  patient: { [id: string]: Patient };\r\n  diagnoses: { [id: string]: Diagnosis[] };\r\n};\r\n\r\nconst initialState: State = {\r\n  patients: {},\r\n  patient: {},\r\n  diagnoses: {},\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);","import React from \"react\";\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, Gender } from \"../types\";\r\n\r\n// structure of a single option\r\nexport type GenderOption = {\r\n  value: Gender;\r\n  label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: GenderOption[];\r\n};\r\n\r\nexport const SelectField = ({\r\n  name,\r\n  label,\r\n  options\r\n}: SelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n}\r\n\r\nexport const TextField= ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}: TextProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field {...field} type='number' min={min} max={max} />\r\n\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\r\nimport { Gender, Patient } from \"../types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        ssn: \"\",\r\n        dateOfBirth: \"\",\r\n        occupation: \"\",\r\n        gender: Gender.Other\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectField\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;\r\n","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n];\r\n\r\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\r\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { Patient } from \"../types\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\nimport { addPatient, useStateValue } from \"../state\";\r\n\r\nconst PatientListPage = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}/patients`,\r\n        values\r\n      );\r\n      dispatch(addPatient(newPatient));\r\n      closeModal();\r\n    } catch (e) {\r\n      console.error(e.response?.data || 'Unknown Error');\r\n      setError(e.response?.data?.error || 'Unknown error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n      <Table celled>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Gender</Table.HeaderCell>\r\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\r\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {Object.values(patients).map((patient: Patient) => (\r\n            <Table.Row key={patient.id}>\r\n              <Table.Cell><Link to={`/${patient.id}`}>{patient.name}</Link></Table.Cell>\r\n              <Table.Cell>{patient.gender}</Table.Cell>\r\n              <Table.Cell>{patient.occupation}</Table.Cell>\r\n              <Table.Cell>\r\n                <HealthRatingBar showText={false} rating={1} />\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <AddPatientModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","import { State } from \"./state\";\r\nimport { Diagnosis, Patient } from \"../types\";\r\n\r\nexport type Action =\r\n  | {\r\n    type: \"SET_PATIENT_LIST\";\r\n    payload: Patient[];\r\n  }\r\n  | {\r\n    type: \"SET_PATIENT\";\r\n    payload: Patient[];\r\n  }\r\n  | {\r\n    type: \"SET_DIAGNOSES\";\r\n    payload: Diagnosis[];\r\n  }\r\n  | {\r\n    type: \"ADD_PATIENT\";\r\n    payload: Patient;\r\n  };\r\n\r\nexport const setPatientList = (content: Patient[]): Action => {\r\n  return {\r\n    type: \"SET_PATIENT_LIST\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const addPatient = (content: Patient): Action => {\r\n  return {\r\n    type: \"ADD_PATIENT\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const setPatient = (content: Patient[]): Action => {\r\n  return {\r\n    type: \"SET_PATIENT\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const setDiagnoses = (content: Diagnosis[]): Action => {\r\n  return {\r\n    type: \"SET_DIAGNOSES\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"SET_PATIENT_LIST\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          ),\r\n          ...state.patients\r\n        }\r\n      };\r\n    case \"SET_DIAGNOSES\":\r\n      return {\r\n        ...state,\r\n        diagnoses: {\r\n          ...action.payload.reduce(\r\n            (memo, diagnose) => ({ ...memo, [diagnose.code]: diagnose }),\r\n            {}\r\n          ),\r\n        }\r\n      };\r\n    case \"SET_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patient: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          )\r\n        }\r\n      };\r\n    case \"ADD_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport { setDiagnoses, setPatient, useStateValue } from \"../state\";\r\nimport { Diagnosis, Patient } from \"../types\";\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst Page = () => {\r\n\r\n  const [{ patient }, dispatch] = useStateValue();\r\n  const [{ diagnoses }] = useStateValue();\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n    const fetchPatient = async () => {\r\n      try {\r\n        const { data: patient } = await axios.get<Patient>(\r\n          `${apiBaseUrl}/patients/${id}`\r\n        );\r\n        dispatch({ type: \"SET_PATIENT\", payload: [patient] });\r\n        dispatch(setPatient([patient]));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchPatient();\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n    const fetchDiagnoses = async () => {\r\n      try {\r\n        const { data: diagnoses } = await axios.get<Diagnosis[]>(\r\n          `${apiBaseUrl}/diagnosis`\r\n        );\r\n        dispatch({ type: \"SET_DIAGNOSES\", payload: diagnoses });\r\n        dispatch(setDiagnoses(diagnoses));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchDiagnoses();\r\n  }, [dispatch]);\r\n\r\n  console.log(diagnoses);\r\n\r\n  return (\r\n    <div>\r\n      {Object.values(patient).map((pa: Patient) => (\r\n        <>\r\n          <div key={pa.id}>\r\n            <h1>{pa.name} {(pa.gender === 'female') ? <Icon name='venus' /> : (pa.gender === 'male') ? <Icon name='mars' /> : <Icon name='neuter' />}</h1>\r\n          </div>\r\n          <p>Birthday: {pa.dateOfBirth}</p>\r\n          <p>ssn: {pa.ssn}</p>\r\n          <p>occupation: {pa.occupation}</p>\r\n          <p>Entries</p>\r\n          {pa.entries.map(ent => {\r\n            return (\r\n              <div key={ent.id}>\r\n                <p>{ent.date} {ent.description}</p>\r\n                <ul>\r\n                  {ent.diagnosisCodes?.map((code) => {\r\n                    return <li key={code}>{code}</li>;\r\n                  })}\r\n                </ul>\r\n              </div>\r\n            );\r\n          })}\r\n        </>\r\n      ))}\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default Page;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { setPatientList, useStateValue } from \"./state\";\r\nimport { Patient } from \"./types\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\nimport Page from \"./PatientInfo/Page\";\r\n\r\nconst App = () => {\r\n  const [, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}/patients`\r\n        );\r\n        dispatch(setPatientList(patientListFromApi));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchPatientList();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <PatientListPage />\r\n            </Route>\r\n            <Route path=\"/:id\">\r\n              <Page />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}