{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","state/reducer.ts","PatientInfo/EntryDetails.tsx","AddEntryModal/EntryFormField.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","PatientInfo/Page.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","Types","apiBaseUrl","initialState","patients","entries","patient","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","undefined","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","type","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","openModal","setOpenModal","setError","closeModal","submitNewPatient","a","axios","post","newPatient","data","payload","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","Cell","to","id","HospitalEntry","entry","dia","Card","date","Icon","code","description","OccupationEntry","HealthCheckEntry","EntryDetails","find","diag","diagnosisCodes","includes","Error","JSON","stringify","assertNever","onChange","handleChange","e","SelectField2","typeOptions","Hospital","OccupationalHealthcare","HealthCheck","rationgOptions","Healthy","LowRisk","HighRisk","CriticalRisk","Ho_initials","specialist","discharge","diDate","criteria","Oc_initials","employerName","sickLeave","endDate","startDate","He_initials","healthCheckRating","AddEntryForm","setType","onchange","document","getElementById","enableReinitialize","setFieldValue","props","push","remove","form","_code","index","length","AddEntryModal","Page","useParams","test","setTest","useEffect","get","fetchPatient","fetchDiagnoses","modalClose","params","submitNewEntry","newEntry","pa","ent","App","patientListFromApi","fetchPatientList","Link","primary","Divider","hidden","exact","path","ReactDOM","render","action","reduce","memo"],"mappings":"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","file":"static/js/main.b108e77a.chunk.js","sourcesContent":["export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\nexport interface BaseEntry {\r\n  id: string;\r\n  description: string;\r\n  date: string;\r\n  specialist: string;\r\n  diagnosisCodes?: Array<Diagnosis['code']>;\r\n}\r\n\r\nexport type SickLeave = {\r\n  startDate: string,\r\n  endDate: string,\r\n};\r\n\r\nexport interface OccupationalHealthcareEntry extends BaseEntry {\r\n  type: 'OccupationalHealthcare',\r\n  employerName: string,\r\n  sickLeave?: SickLeave\r\n}\r\n\r\nexport enum HealthCheckRating {\r\n  \"Healthy\" = 0,\r\n  \"LowRisk\" = 1,\r\n  \"HighRisk\" = 2,\r\n  \"CriticalRisk\" = 3\r\n}\r\n\r\nexport interface HealthCheckEntry extends BaseEntry {\r\n  type: \"HealthCheck\";\r\n  healthCheckRating: HealthCheckRating;\r\n}\r\n\r\nexport type Discharge = {\r\n  diDate: string,\r\n  criteria: string,\r\n};\r\n\r\nexport interface HospitalEntry extends BaseEntry {\r\n  type: 'Hospital',\r\n  discharge: Discharge\r\n}\r\n\r\nexport enum Types {\r\n  Hospital = \"Hospital\",\r\n  OccupationalHealthcare = 'OccupationalHealthcare',\r\n  HealthCheck = 'HealthCheck'\r\n}\r\n\r\nexport type Entry =\r\n    | HospitalEntry\r\n    | OccupationalHealthcareEntry\r\n    | HealthCheckEntry;\r\n\r\nexport interface Patient {\r\n  id: string;\r\n  name: string;\r\n  occupation: string;\r\n  gender: Gender;\r\n  ssn?: string;\r\n  dateOfBirth?: string;\r\n  entries: Entry[]\r\n}\r\n\r\nexport type UnionOmit<T, K extends string | number | symbol> = T extends unknown ? Omit<T, K> : never;","export const apiBaseUrl = 'http://localhost:3000/api';\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Diagnosis, Entry, Patient } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n  patients: { [id: string]: Patient };\r\n  entries: { [id: string]: Entry };\r\n  patient: { [id: string]: Patient };\r\n  diagnoses: Diagnosis[];\r\n};\r\n\r\nconst initialState: State = {\r\n  patients: {},\r\n  entries: {},\r\n  patient: {},\r\n  diagnoses: [],\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);","import React from \"react\";\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, Gender } from \"../types\";\r\n\r\n// structure of a single option\r\nexport type GenderOption = {\r\n  value: Gender;\r\n  label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: GenderOption[];\r\n};\r\n\r\nexport const SelectField = ({\r\n  name,\r\n  label,\r\n  options\r\n}: SelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n  name: string;\r\n}\r\n\r\nexport const TextField = ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}: TextProps) => {\r\n  if (field.value === undefined) {\r\n    field.value = '';\r\n  }\r\n  return (\r\n    <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n  );\r\n};\r\n\r\nexport const ArrayField = ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}: TextProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field {...field} type='number' min={min} max={max} />\r\n\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\r\nimport { Gender, Patient } from \"../types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        ssn: \"\",\r\n        dateOfBirth: \"\",\r\n        occupation: \"\",\r\n        gender: Gender.Other\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectField\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n];\r\n\r\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\r\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { Patient } from \"../types\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\nimport { addPatient, useStateValue } from \"../state\";\r\n\r\nconst PatientListPage = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n  const [openModal, setOpenModal] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const modalOpen = (): void => setOpenModal(true);\r\n\r\n  const closeModal = (): void => {\r\n    setOpenModal(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}/patients`,\r\n        values\r\n      );\r\n      dispatch(addPatient(newPatient));\r\n      closeModal();\r\n    } catch (e) {\r\n      console.error(e.response?.data || 'Unknown Error');\r\n      setError(e.response?.data?.error || 'Unknown error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n      <Table celled>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Gender</Table.HeaderCell>\r\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\r\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {Object.values(patients).map((patient: Patient) => (\r\n            <Table.Row key={patient.id}>\r\n              <Table.Cell><Link to={`/${patient.id}`}>{patient.name}</Link></Table.Cell>\r\n              <Table.Cell>{patient.gender}</Table.Cell>\r\n              <Table.Cell>{patient.occupation}</Table.Cell>\r\n              <Table.Cell>\r\n                <HealthRatingBar showText={false} rating={1} />\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <AddPatientModal\r\n        modalOpen={openModal}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => modalOpen()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","import { State } from \"./state\";\r\nimport { Diagnosis, Entry, Patient } from \"../types\";\r\n\r\nexport type Action =\r\n  | {\r\n    type: \"SET_PATIENT_LIST\";\r\n    payload: Patient[];\r\n  }\r\n  | {\r\n    type: \"SET_PATIENT\";\r\n    payload: Patient[];\r\n  }\r\n  | {\r\n    type: \"SET_DIAGNOSES\";\r\n    payload: Diagnosis[];\r\n  }\r\n  | {\r\n    type: \"ADD_ENTRY\";\r\n    payload: Entry;\r\n  }\r\n  | {\r\n    type: \"ADD_PATIENT\";\r\n    payload: Patient;\r\n  };\r\n\r\nexport const setPatientList = (content: Patient[]): Action => {\r\n  return {\r\n    type: \"SET_PATIENT_LIST\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const addPatient = (content: Patient): Action => {\r\n  return {\r\n    type: \"ADD_PATIENT\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const addEntry = (content: Entry): Action => {\r\n  return {\r\n    type: \"ADD_ENTRY\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const setPatient = (content: Patient[]): Action => {\r\n  return {\r\n    type: \"SET_PATIENT\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const setDiagnoses = (content: Diagnosis[]): Action => {\r\n  return {\r\n    type: \"SET_DIAGNOSES\",\r\n    payload: content,\r\n  };\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"SET_PATIENT_LIST\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          ),\r\n          ...state.patients\r\n        }\r\n      };\r\n    case \"SET_DIAGNOSES\":\r\n      return {\r\n        ...state,\r\n        diagnoses: {\r\n          ...action.payload,\r\n          ...state.diagnoses\r\n        }\r\n      };\r\n    case \"SET_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patient: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          )\r\n        }\r\n      };\r\n    case \"ADD_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    case \"ADD_ENTRY\":\r\n      return {\r\n        ...state,\r\n        entries: {\r\n          ...state.entries,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from \"react\";\r\nimport { Icon, Card } from \"semantic-ui-react\";\r\nimport { useStateValue } from \"../state\";\r\nimport { Diagnosis, Entry } from \"../types\";\r\n\r\nexport const HospitalEntry: React.FC<{ entry: Entry, dia?: Diagnosis }> = ({ entry, dia }) => {\r\n    return (\r\n        <Card style={{ width: \"90vw\" }}>\r\n            <h1>{entry.date} <Icon name=\"hospital\" /></h1>\r\n            {(dia !== undefined)\r\n                ? <>\r\n                    <p>{dia.code}</p>\r\n                    <p>{dia.name}</p>\r\n                </>\r\n                : null\r\n            }\r\n            <p>{entry.description}</p>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport const OccupationEntry: React.FC<{ entry: Entry, dia?: Diagnosis }> = ({ entry, dia }) => {\r\n    return (\r\n        <Card style={{ width: \"90vw\" }}>\r\n            <h1>{entry.date} <Icon name=\"user doctor\" /></h1>\r\n            {(dia !== undefined)\r\n                ? <>\r\n                    <p>{dia.code}</p>\r\n                    <p>{dia.name}</p>\r\n                </>\r\n                : null\r\n            }\r\n            <p>{entry.description}</p>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport const HealthCheckEntry: React.FC<{ entry: Entry, dia?: Diagnosis }> = ({ entry, dia }) => {\r\n    return (\r\n        <Card style={{ width: \"90vw\" }}>\r\n            <h1>{entry.date} <Icon name=\"stethoscope\" /></h1>\r\n            {(dia !== undefined)\r\n                ? <>\r\n                    <p>{dia.code}</p>\r\n                    <p>{dia.name}</p>\r\n                </>\r\n                : null\r\n            }\r\n            <p>{entry.description}</p>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\r\n\r\n    const [{ diagnoses }] = useStateValue();\r\n\r\n    const assertNever = (value: never): never => {\r\n        throw new Error(\r\n            `Unhandled discriminated member: ${JSON.stringify(value)}`\r\n        );\r\n    };\r\n\r\n    const dia = diagnoses.find(diag => entry.diagnosisCodes?.includes(diag.code))\r\n\r\n    switch (entry.type) {\r\n        case 'Hospital':\r\n            return <HospitalEntry entry={entry} dia={dia} />;\r\n        case 'OccupationalHealthcare':\r\n            return <OccupationEntry entry={entry} dia={dia} />;\r\n        case 'HealthCheck':\r\n            return <HealthCheckEntry entry={entry} dia={dia} />;\r\n        default:\r\n            return assertNever(entry);\r\n    }\r\n};\r\n\r\nexport default EntryDetails;","import React from \"react\";\r\nimport { Field } from \"formik\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport { HealthCheckRating, Types } from \"../types\";\r\n\r\nexport type TypeOption = {\r\n    value: Types;\r\n    label: string;\r\n};\r\n\r\nexport type RatingOption = {\r\n    value: HealthCheckRating;\r\n    label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectFieldProps = {\r\n    name: string;\r\n    label: string;\r\n    options: TypeOption[];\r\n    onChange: () => void;\r\n    handleChange: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\r\n};\r\n\r\nexport const SelectField = ({\r\n    name,\r\n    label,\r\n    options,\r\n    onChange,\r\n    handleChange,\r\n}: SelectFieldProps) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field onChange={(e: any) => {\r\n            handleChange(\"type\", e.value);\r\n            onChange();\r\n        }} id=\"select\" as=\"select\" name={name} className=\"ui dropdown\">\r\n            {options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label || option.value}\r\n                </option>\r\n            ))}\r\n        </Field>\r\n    </Form.Field>\r\n);\r\n\r\n// props for select field component\r\ntype SelectFieldProps2 = {\r\n    name: string;\r\n    label: string;\r\n    options: RatingOption[];\r\n};\r\n\r\nexport const SelectField2 = ({\r\n    name,\r\n    label,\r\n    options,\r\n}: SelectFieldProps2) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n            {options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label || option.value}\r\n                </option>\r\n            ))}\r\n        </Field>\r\n    </Form.Field>\r\n);","import React, { useState } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Entry, HealthCheckEntry, HealthCheckRating, HospitalEntry, OccupationalHealthcareEntry, Types, UnionOmit } from \"../types\";\r\nimport { Field, Formik, Form, FieldArray } from \"formik\";\r\nimport { TextField } from \"../AddPatientModal/FormField\";\r\nimport { TypeOption, SelectField, RatingOption, SelectField2 } from \"./EntryFormField\";\r\n\r\nexport type EntryFormValues = UnionOmit<Entry, \"id\">;\r\n\r\ninterface Props {\r\n    onSubmit: (values: EntryFormValues) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nconst typeOptions: TypeOption[] = [\r\n    { value: Types.Hospital, label: \"Hospital\" },\r\n    { value: Types.OccupationalHealthcare, label: \"OccupationalHealthcare\" },\r\n    { value: Types.HealthCheck, label: \"HealthCheck\" }\r\n];\r\n\r\nconst rationgOptions: RatingOption[] = [\r\n    { value: HealthCheckRating.Healthy, label: \"Healthy\" },\r\n    { value: HealthCheckRating.LowRisk, label: \"LowRisk\" },\r\n    { value: HealthCheckRating.HighRisk, label: \"HighRisk\" },\r\n    { value: HealthCheckRating.CriticalRisk, label: \"CriticalRisk\" }\r\n];\r\n\r\nconst Ho_initials: Omit<HospitalEntry, 'id'> = {\r\n    date: '',\r\n    description: '',\r\n    specialist: '',\r\n    diagnosisCodes: [''],\r\n    discharge: { diDate: '', criteria: '' },\r\n    type: 'Hospital',\r\n};\r\n\r\nconst Oc_initials: Omit<OccupationalHealthcareEntry, 'id'> = {\r\n    date: '',\r\n    description: '',\r\n    specialist: '',\r\n    diagnosisCodes: [''],\r\n    employerName: '',\r\n    sickLeave: { endDate: '', startDate: '' },\r\n    type: 'OccupationalHealthcare',\r\n};\r\n\r\nconst He_initials: Omit<HealthCheckEntry, 'id'> = {\r\n    date: '',\r\n    description: '',\r\n    specialist: '',\r\n    diagnosisCodes: [''],\r\n    healthCheckRating: 0,\r\n    type: 'HealthCheck',\r\n};\r\n\r\nexport const AddEntryForm = ({ onSubmit, onCancel }: Props) => {\r\n\r\n    const [type, setType] = useState<'Hospital' | 'OccupationalHealthcare' | 'HealthCheck'>('Hospital');\r\n\r\n    const onchange = () => {\r\n        const field = document.getElementById('select') as HTMLSelectElement;\r\n        setType(field.value as Types);\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={(type === 'HealthCheck') ? He_initials : (type === 'Hospital') ? Ho_initials : Oc_initials}\r\n            onSubmit={onSubmit}\r\n            validate={values => {\r\n                const requiredError = \"Field is required\";\r\n                const errors: { [field: string]: string } = {};\r\n                if (!values.date) {\r\n                    errors.date = requiredError;\r\n                }\r\n                if (!values.description) {\r\n                    errors.description = requiredError;\r\n                }\r\n                if (!values.specialist) {\r\n                    errors.specialist = requiredError;\r\n                }\r\n                if (!values.diagnosisCodes) {\r\n                    errors.diagnosisCodes = requiredError;\r\n                }\r\n                if (!values.type) {\r\n                    errors.type = requiredError;\r\n                }\r\n                switch (values.type) {\r\n                    case \"HealthCheck\":\r\n                        if (!values.healthCheckRating) {\r\n                            errors.healthCheckRating = requiredError;\r\n                        }\r\n                        return errors;\r\n                    case \"Hospital\":\r\n                        if (!values.discharge.criteria || !values.discharge.diDate) {\r\n                            errors.discharge = requiredError;\r\n                            errors.discharge = requiredError;\r\n                        }\r\n                        return errors;\r\n                    case \"OccupationalHealthcare\":\r\n                        if (!values.employerName) {\r\n                            errors.employerName = requiredError;\r\n                        }\r\n                        if (!values.sickLeave) {\r\n                            errors.startDate = requiredError;\r\n                            errors.endDate = requiredError;\r\n                        }\r\n                        return errors;\r\n                    default:\r\n                        return errors;\r\n                }\r\n            }}\r\n        >\r\n            {({ isValid, dirty, setFieldValue }) => {\r\n                return (\r\n                    <Form className=\"form ui\">\r\n                        <SelectField\r\n                            label=\"Type\"\r\n                            name=\"type\"\r\n                            options={typeOptions}\r\n                            onChange={onchange}\r\n                            handleChange={setFieldValue}\r\n                        />\r\n                        <Field\r\n                            label=\"description\"\r\n                            placeholder=\"Description\"\r\n                            name=\"description\"\r\n                            component={TextField}\r\n                        />\r\n                        <Field\r\n                            label=\"Specialist\"\r\n                            placeholder=\"Specialist\"\r\n                            name=\"specialist\"\r\n                            component={TextField}\r\n                        />\r\n                        <Field\r\n                            label=\"Date\"\r\n                            placeholder=\"YYYY-MM-DD\"\r\n                            name=\"date\"\r\n                            component={TextField}\r\n                        />\r\n\r\n                        <div>\r\n                            <label>Diagnosis Codes</label>\r\n                            <FieldArray name=\"diagnosisCodes\">\r\n                                {\r\n                                    (props) => {\r\n                                        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n                                        const { push, remove, form } = props;\r\n                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                                        const { values } = form;\r\n                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                                        const { diagnosisCodes } = values;\r\n                                        return <div>\r\n                                            {\r\n                                                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n                                                diagnosisCodes.map((_code: string, index: number) => (\r\n                                                    <div key={index}>\r\n                                                        <Field name={`diagnosisCodes[${index}]`} />\r\n                                                        {(diagnosisCodes.length !== 1)\r\n                                                            ? <button type=\"button\" onClick={() => remove(index)}> - </button>\r\n                                                            : null}\r\n                                                        <button type=\"button\" onClick={() => push('')}> + </button>\r\n                                                    </div>\r\n                                                ))\r\n                                            }\r\n                                        </div>;\r\n                                    }\r\n                                }\r\n                            </FieldArray>\r\n                        </div>\r\n\r\n                        {(type === 'OccupationalHealthcare') ?\r\n                            <><Field\r\n                                label=\"startDate\"\r\n                                placeholder=\"YYYY-MM-DD\"\r\n                                name=\"sickLeave.startDate\"\r\n                                component={TextField} />\r\n\r\n                                <Field\r\n                                    label=\"endDate\"\r\n                                    placeholder=\"YYYY-MM-DD\"\r\n                                    name=\"sickLeave.endDate\"\r\n                                    component={TextField}\r\n                                />\r\n                                \r\n                                <Field\r\n                                label=\"employer name\"\r\n                                placeholder=\"name here\"\r\n                                name=\"employerName\"\r\n                                component={TextField} /></>\r\n\r\n                            : (type === 'HealthCheck') ?\r\n                                <>\r\n                                    <SelectField2\r\n                                        label=\"healthCheckRating\"\r\n                                        name=\"healthCheckRating\"\r\n                                        options={rationgOptions} />\r\n                                </>\r\n                                : <>\r\n                                    <Field\r\n                                        label=\"Discharge Date\"\r\n                                        placeholder=\"YYYY-MM-DD\"\r\n                                        name=\"discharge.diDate\"\r\n                                        component={TextField}\r\n                                    />\r\n                                    <Field\r\n                                        label=\"Criteria\"\r\n                                        placeholder=\"criteria\"\r\n                                        name=\"discharge.criteria\"\r\n                                        component={TextField}\r\n                                    />\r\n                                </>\r\n                        }\r\n                        <Grid>\r\n                            <Grid.Column floated=\"left\" width={5}>\r\n                                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column floated=\"right\" width={5}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                    color=\"green\"\r\n                                    disabled={!dirty || !isValid}\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\nexport default AddEntryForm;","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: EntryFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new entry for patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddEntryModal;","import axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport { addEntry, setDiagnoses, setPatient, useStateValue } from \"../state\";\r\nimport { Diagnosis, Entry, Patient } from \"../types\";\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport EntryDetails from \"./EntryDetails\";\r\nimport { EntryFormValues } from \"../AddEntryModal/AddEntryForm\";\r\nimport AddEntryModal from \"../AddEntryModal\";\r\n\r\nconst Page = () => {\r\n\r\n  const [{ patient }, dispatch] = useStateValue();\r\n  const { id } = useParams<{ id: string }>();\r\n  const [test, setTest] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n    const fetchPatient = async () => {\r\n      try {\r\n        const { data: patient } = await axios.get<Patient>(\r\n          `${apiBaseUrl}/patients/${id}`\r\n        );\r\n        dispatch({ type: \"SET_PATIENT\", payload: [patient] });\r\n        dispatch(setPatient([patient]));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchPatient();\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n    const fetchDiagnoses = async () => {\r\n      try {\r\n        const { data: diagnoses } = await axios.get<Diagnosis[]>(\r\n          `${apiBaseUrl}/diagnoses`\r\n        );\r\n        dispatch({ type: \"SET_DIAGNOSES\", payload: diagnoses });\r\n        dispatch(setDiagnoses(diagnoses));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchDiagnoses();\r\n  }, [dispatch]);\r\n\r\n  const openM = (): void => setTest(true);\r\n  const modalClose = (): void => {\r\n    setTest(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  interface RouteParams {\r\n    id: string\r\n  }\r\n\r\n  const params = useParams<RouteParams>();\r\n\r\n  const submitNewEntry = async (values: EntryFormValues) => {\r\n    try {\r\n      const { data: newEntry } = await axios.post<Entry>(\r\n        `${apiBaseUrl}/patients/${params.id}/entries`,\r\n        values\r\n      );\r\n      dispatch(addEntry(newEntry));\r\n      modalClose();\r\n    } catch (e) {\r\n      console.error(e.response?.data || 'Unknown Error');\r\n      setError(e.response?.data?.error || 'Unknown error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {Object.values(patient).map((pa: Patient) => (\r\n        <>\r\n          <div key={pa.id}>\r\n            <h1>{pa.name} {(pa.gender === 'female') ? <Icon name='venus' /> : (pa.gender === 'male') ? <Icon name='mars' /> : <Icon name='neuter' />}</h1>\r\n          </div>\r\n          <p>Birthday: {pa.dateOfBirth}</p>\r\n          <p>ssn: {pa.ssn}</p>\r\n          <p>occupation: {pa.occupation}</p>\r\n          <AddEntryModal\r\n            modalOpen={test}\r\n            onSubmit={submitNewEntry}\r\n            error={error}\r\n            onClose={modalClose}\r\n          />\r\n          <Button onClick={() => openM()}>Add New Entry</Button>\r\n          <p>Entries</p>\r\n          {pa.entries.map(ent => {\r\n            return (\r\n              <div key={ent.id}>\r\n                <ul>\r\n                  {\r\n                      <EntryDetails key={ent.id} entry={ent} />\r\n                  }\r\n                </ul>\r\n              </div>\r\n            );\r\n          }\r\n          )}\r\n        </>\r\n      ))}\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default Page;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { setPatientList, useStateValue } from \"./state\";\r\nimport { Patient } from \"./types\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\nimport Page from \"./PatientInfo/Page\";\r\n\r\nconst App = () => {\r\n  const [, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    void axios.get<void>(`${apiBaseUrl}/ping`);\r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}/patients`\r\n        );\r\n        dispatch(setPatientList(patientListFromApi));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchPatientList();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <PatientListPage />\r\n            </Route>\r\n            <Route path=\"/:id\">\r\n              <Page />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}